#+TITLE: Exam 2019-06-05
#+AUTHOR: Calin Capitanu
#+DATE: 08/03/2020

* 8) a one way ticket
#+BEGIN_SRC elixir

defmodule OWT do
  @type city() :: atom()
  @type dist() :: integer() | :inf

  @spec shortest(city(),city(),map()) :: dist()

  def shortest(from,to,map) do
    umap = Map.new({to, 0})
    dist = check(from, to, umap ,map)
    dist
  end

  @spec check(city(),city(),map(),map()) :: {:found, dist(),map()}

  def check(from,to,umap,map) do
    case map.to do
      :nil -> shortest(from,to,umap,map)
      distance -> select(map.to, to, umap, map)
    end
  end

  @spec shortest(city(),city(),map(),map()) :: {:found,dist(),map()}

  def shortest(from,to,updated,map) do
    updated = Map.put(updated,from,:inf)
    neighbours = Map.get(map, from)
    {:found, dist, updated} = select(neighbours, to, updated,map)
    ...
    {:found, dist, updated}
  end

  @spec select([{:city,city(),integer()}], city(),map(),map()) :: {:found,dist(),map()}

  def select([], _, updated,map) do {:found, :inf, map} end
  def select([{:city,next,d1} | rest], to, updated, map) do
    {:found, d2, map}= check(next,to,updated,map)
    dist = add(d1,d2)
    sele = select(rest,to,updated,map)
    if sele< dist do
      {:found, sele, updated}
    else
      {:found,dist,updated}
    end
  end

  @spec add(dist(),dist()) :: dist()

  def add(:inf, _) do :inf end
  def add(_, :inf) do :inf end
  def add(x, y) do x+y end
end
#+END_SRC

