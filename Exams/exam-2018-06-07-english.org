#+TITLE: Exam 2018-06-07
#+AUTHOR: Calin Capitanu
#+DATE: 08/03/2018

* 1) Lambda Calculus
** 8
** 10
** 12
* 2) Operational semantics
E{}(:b) -> b S({}, y) -> {} P{}(y,b) ETC YOU CAN DO IT
* 3) Pattern Matching
** a) {x/1,y/2,z/3}
** b){x/1,y/[2,3],z/[]}
** c){x/1,y/2,z/3}
** d){x/1,y/2,z/[3,4]}
** e){x/1,y/2,z/[3,4]}
* 4) Recursion
** fizzbuzz
#+BEGIN_SRC elixir
  def fizzbuzz(n) do
    fizzbuzz(1,n+1,1,1) 
  end
  def fizzbuzz(1,n,three,five) do fizzbuzz(1,n,three,five, []) end
  def fizzbuzz(elem, 1, _, _, list) do reverse(list) end
  def fizzbuzz(elem, n, 3, 5, list) do
    fizzbuzz(elem+1, n-1,1,1,[:fizzbuzz | list]) end
  def fizzbuzz(elem, n,3,five,list) do
    fizzbuzz(elem+1,n-1,1,five+1,[:fizz | list]) end
  def fizzbuzz(elem,n,three,5,list) do
    fizzbuzz(elem+1,n-1,three+1,1,[:buzz  | list]) end
  def fizzbuzz(elem, n, three, five, list) do
    fizzbuzz(elem+1,n-1,three+1,five+1, [elem | list]) end
  def reverse(list) do nreverse(list,[]) end
  def nreverse([],list) do list end
  def nreverse([elem | rest], list) do
    nreverse(rest,[elem|list])
  end
#+END_SRC
** fairly balanced
#+BEGIN_SRC elixir
  def fairly(:nil) do :nil end
  def fairly({:node,:nil,:nil}) do {:ok,1} end
  def fairly({:node,:nil,right}) do
    {x,y} = fairly(right)
    if y >= 2 do :no else
    {:ok, 1+y} end
  end
  def fairly({:node,left,:nil}) do
    {x,y} = fairly(left)
    if y >= 2 do :no else
    {:ok, 1+y} end
  end
  
  def fairly({:node, left, right}) do
    {msg, x} = fairly(left)
    {msg1, y} = fairly(right)
    if msg == :no or msg1 == :no do :no
    else if abs(x-y) > 1 do :no
    else {:ok,1 + max(x,y)} end end
  end
#+END_SRC
* 5) Time complexity
** sorting a list
Time complexity: O(N^2)
** a graph
Time complexity: O(E*V) where E = number of edges and V = number of vertices.

WRONG: O(k^n) where k = number of branching factor and n = number of vertices. wtf?

* 6) Process description
** A knife, a fork...
#+BEGIN_SRC elixir
  def dillinger() do
    spawn(fn() -> nyc() end)
  end
  def nyc() do
    IO.puts("Hey Jim!")
    receive do
      :knife -> knife()
    end
  end

  def knife() do
    receive do
      :fork -> fork()
    end
  end
  
  def fork() do
    receive do
      :bottle -> bottle()
    end
  end
  def bottle() do
    receive do
      :cork -> nyc()
    end
  end
#+END_SRC
** tic-tac-toe
[:tac,:toe,:tic]
** parallel foldp

